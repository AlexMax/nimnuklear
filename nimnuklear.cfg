[n.global]
output = nimnuklear

[n.include]
nimnuklear/src

[n.prepare]
gitremote = "https://github.com/vurtun/nuklear"
gitsparse = """
src/*
"""

[nuklear.h]
preprocess = true
defines = true
recurse = true

compile = nimnuklear/src/*.c
flags = "--prefix:nk__ --prefix:nk_ --prefix:NK_"

search.1 = "#define NK_UINT_MAX"
comment.1 = 1

[nimnuklear/nuklear.nim]
regex.1 = "((?s:proc [`a-z]+.*?headernuklear.}\n))"
move.1 = "{.importc: \"seq\".}: cuint\n\n"

search.2 = "\ntype\n"
replace.2 = "\n"

regex.3 = "((?s:  _dummy_array.*?const))"
replace.3 = "const"

search.4 = "  char*"
prepend.4 = "type\n  draw_vertex_layout_element* = object\n"

search.5 = "  color*"
prepend.5 = "type\n"

search.6 = "  table*"
comment.6 = 1

search.7 = "__"
replace.7 = "_"

search.8 = "float* = f"
comment.8 = 1

search.9 = "UTF_INVALID"
replace.9 = "#UTF_INVALID"

search.10 = """text_edit* {.importc: "nk_text_edit", header: headernuklear, bycopy.} = object"""
comment.10 = 1

regex.11 = """    WIDGET_STATE_([A-Z]+) = WIDGET_STATE_([A-Z]+) or WIDGET_STATE_([A-Z]+)[,]?"""
replace.11 = ""

regex.12 = """TEXT_ALIGN_([A-Z]+) or TEXT_ALIGN_([A-Z]+)[,]*"""
replace.12 = "TEXT_ALIGN_$1.int32 or TEXT_ALIGN_$2.int32"

search.13 = "  image*"
replace.13 = "  img*"

search.14 = "ptr image"
replace.14 = "ptr img"

search.15 = ": image"
replace.15 = ": img"

regex.16 = """(?s:EDIT_FIELD =.*?\n\n)"""
replace.16 = """EDIT_FIELD = EDIT_SIMPLE.int32 or EDIT_SELECTABLE.int32 or EDIT_CLIPBOARD.int32,  
    EDIT_EDITOR = EDIT_SELECTABLE.int32 or EDIT_MULTILINE.int32 or EDIT_ALLOW_TAB.int32 or EDIT_CLIPBOARD.int32,
    EDIT_BOX = EDIT_ALWAYS_INSERT_MODE.int32 or EDIT_SELECTABLE.int32 or EDIT_MULTILINE.int32 or EDIT_ALLOW_TAB.int32 or EDIT_CLIPBOARD.int32"""
  
search.17 = "color_f*"
replace.17 = "nk_color_f*"

regex.18 = """proc vec2([i]?)\*"""
replace.18 = "proc newVec2$1*"

regex.19 = """proc rect([i]?)\*"""
replace.19 = "proc newRect$1*"

search.21 = """const
  WINDOW_DYNAMIC = WINDOW_PRIVATE
"""
move.21 = "{.importc: \"seq\".}: cuint\n\n"

search.22 = "{.importc: \"seq\".}: cuint\n\n"
append.22 = """const WIDGET_STATE_HOVERED = widget_states(WIDGET_STATE_HOVER.int32 or WIDGET_STATE_MODIFIED.int32)
const WIDGET_STATE_ACTIVE = widget_states(WIDGET_STATE_ACTIVED.int32 or WIDGET_STATE_MODIFIED.int32)
"""

regex.24 = """(?s:PANEL_SET_NONBLOCK =.*?\n\n)"""
replace.24 = """PANEL_SET_NONBLOCK = PANEL_CONTEXTUAL.int32 or PANEL_COMBO.int32 or PANEL_MENU.int32 or
    PANEL_TOOLTIP.int32,
    PANEL_SET_POPUP = PANEL_SET_NONBLOCK.int32 or PANEL_POPUP.int32,
    PANEL_SET_SUB = PANEL_SET_POPUP.int32 or PANEL_GROUP.int32
"""

search.25 = "WINDOW_ROM or WINDOW_NO_INPUT"
replace.25 = "WINDOW_ROM.int32 or WINDOW_NO_INPUT.int32"

prepend.26 = """macro find_size(a,b: untyped): untyped =
  if sizeof(a) < sizeof(b):
    sizeof(b)
  else:
    sizeof(a) div sizeof(uint32) div 2
"""

regex.27 = """(?s:array\[\(.*?\])"""
replace.27 = "array[find_size(window, panel), uint32]"